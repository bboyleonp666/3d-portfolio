/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'

export default function Model({ gui, ...props }) {
  const groupRef = useRef()
  const { nodes, materials } = useGLTF('/home_office_v2/scene.gltf')
  const objectMeshes = Object.keys(nodes)
    .filter((key) => key.startsWith('Object_'))
    .map((key) => (
      <mesh
        key={key}
        castShadow
        receiveShadow
        geometry={nodes[key].geometry}
        material={materials[nodes[key].material.name]}
      />
    ));
  
  useEffect(() => {
    if (groupRef.current) {
      groupRef.current.rotation.z = 0.05 * Math.PI;
    }

    gui.add(groupRef.current.position, 'x', -50, 50, 1).name('Model X Position');
    gui.add(groupRef.current.position, 'y', -50, 50, 1).name('Model Y Position');
    gui.add(groupRef.current.position, 'z', -50, 50, 1).name('Model Z Position');
    gui.add(groupRef.current.rotation, 'x', -Math.PI, Math.PI, 0.1).name('Model X Rotation');
    gui.add(groupRef.current.rotation, 'y', -Math.PI, Math.PI, 0.1).name('Model Y Rotation');
    gui.add(groupRef.current.rotation, 'z', -Math.PI, Math.PI, 0.1).name('Model Z Rotation');
    gui.add(groupRef.current.scale, 'x', 0, 10, 0.1).name('Model X Scale');
    gui.add(groupRef.current.scale, 'y', 0, 10, 0.1).name('Model Y Scale');
    gui.add(groupRef.current.scale, 'z', 0, 10, 0.1).name('Model Z Scale');
    return () => { gui.destroy(); };
  }, []);

  return (
    <group ref={groupRef} {...props} dispose={null}>
      {objectMeshes}
    </group>
  )
}

useGLTF.preload('/home_office/scene.gltf')
